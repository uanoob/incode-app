{"version":3,"sources":["store/reducers/clientReducer.js","store/reducers/index.js","store/actions/types.js","store/store.js","store/actions/clientsActions.js","container/ClientSearch.js","layout/ClientItem.js","container/ClientsList.js","layout/ClientDetailItem.js","container/ClientDetail.js","layout/Home.js","App.js","serviceWorker.js","index.js"],"names":["initialState","data","client","search","filter","combineReducers","clients","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","enhancer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","localApi","axios","create","baseURL","timeout","filterClients","object","regexp","reg","RegExp","concat","key","match","ClientSearch","searchInputHandler","e","_this$props","_this","props","searchClientsConnect","isFilteredConnect","target","value","react_default","a","createElement","className","onChange","this","placeholder","Component","defaultProps","mapDispatchToProps","obj","bool","connect","ClientItem","_ref","id","avatar","firstName","lastName","title","onClick","role","tabIndex","onKeyPress","src","alt","ClientsList","onClientItemHandler","getClientByIdConnect","getClientsConnect","_this2","_this$props2","show","map","src_layout_ClientItem","contact","phone","general","job","asyncToGenerator","regenerator_default","mark","_callee","dispatch","response","wrap","_context","prev","next","get","sent","stop","_x","find","ClientDetailItem","company","email","street","city","zipcode","country","ClientDetail","renderClientDetail","layout_ClientDetailItem","address","zipCode","Home","container_ClientSearch","container_ClientsList","container_ClientDetail","App","es","layout_Home","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9675195a.chunk.js","sourcesContent":["import {\n  GET_CLIENTS,\n  GET_CLIENT_BY_ID,\n  SEARCH_CLIENTS,\n  IS_FILTERED,\n} from '../actions/types';\n\nconst initialState = {\n  data: [],\n  client: null,\n  search: [],\n  filter: false,\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_CLIENTS:\n      return { ...state, data: action.payload };\n    case GET_CLIENT_BY_ID:\n      return { ...state, client: action.payload };\n    case SEARCH_CLIENTS:\n      return { ...state, search: action.payload };\n    case IS_FILTERED:\n      return { ...state, filter: action.payload };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport clientReducer from './clientReducer';\n\nexport default combineReducers({\n  clients: clientReducer,\n});\n","export const GET_CLIENTS = 'GET_CLIENTS';\nexport const GET_CLIENT_BY_ID = 'GET_CLIENT_BY_ID';\nexport const SEARCH_CLIENTS = 'SEARCH_CLIENTS';\nexport const IS_FILTERED = 'IS_FILTERED';\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst enhancer = compose(\n  applyMiddleware(...middleware),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\nconst store = createStore(rootReducer, initialState, enhancer);\n\nexport default store;\n","import axios from 'axios';\n\nimport {\n  GET_CLIENTS,\n  GET_CLIENT_BY_ID,\n  SEARCH_CLIENTS,\n  IS_FILTERED,\n} from './types';\n\nconst localApi = axios.create({\n  baseURL: 'http://localhost:5000',\n  timeout: 1000,\n});\n\nexport const getClients = () => async dispatch => {\n  const response = await localApi.get('/data');\n  dispatch({\n    type: GET_CLIENTS,\n    payload: response.data,\n  });\n};\n\nexport const getClientById = (clients, id) => {\n  const result = clients.find(client => client.contact.phone === id);\n  return {\n    type: GET_CLIENT_BY_ID,\n    payload: result,\n  };\n};\n\nexport const searchClients = (clients, regexp) => {\n  const result = clients.filter(obj => {\n    for (let key in obj) {\n      if (filterClients(obj[key], regexp)) {\n        return true;\n      }\n    }\n  });\n  // console.log(result);\n  return {\n    type: SEARCH_CLIENTS,\n    payload: result,\n  };\n};\n\nconst filterClients = (object, regexp) => {\n  const reg = new RegExp(`(?:^|\\\\s)${regexp}`, 'gi');\n  for (let key in object) {\n    if (object[key].match(reg)) {\n      return true;\n    }\n  }\n};\n\nexport const isFiltered = bool => {\n  return {\n    type: IS_FILTERED,\n    payload: bool,\n  };\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { searchClients, isFiltered } from '../store/actions';\n\nclass ClientSearch extends Component {\n  searchInputHandler = (e) => {\n    const { data, searchClientsConnect, isFilteredConnect } = this.props;\n    searchClientsConnect(data, e.target.value);\n    isFilteredConnect(true);\n  };\n\n  render() {\n    return (\n      <div className=\"ui fluid icon input\">\n        <input onChange={this.searchInputHandler} type=\"text\" placeholder=\"Search users...\" />\n        <i className=\"search icon\" />\n      </div>\n    );\n  }\n}\n\nClientSearch.defaultProps = {\n  data: [],\n};\n\nClientSearch.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.objectOf(\n      PropTypes.shape({\n        general: PropTypes.shape({\n          firstName: PropTypes.string.isRequired,\n          lastName: PropTypes.string.isRequired,\n          avatar: PropTypes.string.isRequired,\n        }),\n        job: PropTypes.shape({\n          company: PropTypes.string.isRequired,\n          title: PropTypes.string.isRequired,\n        }),\n        contact: PropTypes.shape({\n          email: PropTypes.string.isRequired,\n          phone: PropTypes.string.isRequired,\n        }),\n        address: PropTypes.shape({\n          street: PropTypes.string.isRequired,\n          city: PropTypes.string.isRequired,\n          zipcode: PropTypes.string.isRequired,\n          country: PropTypes.string.isRequired,\n        }),\n      }),\n    ),\n  ),\n  searchClientsConnect: PropTypes.func.isRequired,\n  isFilteredConnect: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  data: state.clients.data,\n});\n\nconst mapDispatchToProps = {\n  searchClientsConnect: searchClients,\n  isFilteredConnect: isFiltered,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ClientSearch);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ClientItem.css';\n\nconst ClientItem = ({\n  id, avatar, firstName, lastName, title, onClick,\n}) => (\n  <div\n    className=\"item item-custom\"\n    id={id}\n    role=\"button\"\n    tabIndex=\"0\"\n    onClick={onClick}\n    onKeyPress={onClick}\n  >\n    <div className=\"ui mini image\">\n      <img src={avatar} alt={`${firstName} ${lastName}`} />\n    </div>\n    <div className=\"content\">\n      <h2 className=\"header\">\n        {firstName}\n        {lastName}\n      </h2>\n      <p className=\"description\">{title}</p>\n    </div>\n  </div>\n);\n\nClientItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ClientItem;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getClients, getClientById } from '../store/actions';\nimport ClientItem from '../layout/ClientItem';\n\nclass ClientsList extends Component {\n  componentDidMount() {\n    const { getClientsConnect } = this.props;\n    getClientsConnect();\n  }\n\n  onClientItemHandler = (e) => {\n    const { getClientByIdConnect, clients } = this.props;\n    getClientByIdConnect(clients, e.target.id);\n  };\n\n  render() {\n    const { clients, search, filter } = this.props;\n    const show = filter ? search : clients;\n\n    return (\n      <div className=\"ui items segment\">\n        {show.map(client => (\n          <ClientItem\n            key={client.contact.phone}\n            id={client.contact.phone}\n            avatar={client.general.avatar}\n            firstName={client.general.firstName}\n            lastName={client.general.lastName}\n            title={client.job.title}\n            onClick={this.onClientItemHandler}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nClientsList.defaultProps = {\n  clients: [],\n  search: [],\n};\n\nClientsList.propTypes = {\n  clients: PropTypes.arrayOf(\n    PropTypes.objectOf(\n      PropTypes.shape({\n        general: PropTypes.shape({\n          firstName: PropTypes.string.isRequired,\n          lastName: PropTypes.string.isRequired,\n          avatar: PropTypes.string.isRequired,\n        }),\n        job: PropTypes.shape({\n          company: PropTypes.string.isRequired,\n          title: PropTypes.string.isRequired,\n        }),\n        contact: PropTypes.shape({\n          email: PropTypes.string.isRequired,\n          phone: PropTypes.string.isRequired,\n        }),\n        address: PropTypes.shape({\n          street: PropTypes.string.isRequired,\n          city: PropTypes.string.isRequired,\n          zipcode: PropTypes.string.isRequired,\n          country: PropTypes.string.isRequired,\n        }),\n      }),\n    ),\n  ),\n  search: PropTypes.arrayOf(\n    PropTypes.objectOf(\n      PropTypes.shape({\n        general: PropTypes.shape({\n          firstName: PropTypes.string.isRequired,\n          lastName: PropTypes.string.isRequired,\n          avatar: PropTypes.string.isRequired,\n        }),\n        job: PropTypes.shape({\n          company: PropTypes.string.isRequired,\n          title: PropTypes.string.isRequired,\n        }),\n        contact: PropTypes.shape({\n          email: PropTypes.string.isRequired,\n          phone: PropTypes.string.isRequired,\n        }),\n        address: PropTypes.shape({\n          street: PropTypes.string.isRequired,\n          city: PropTypes.string.isRequired,\n          zipcode: PropTypes.string.isRequired,\n          country: PropTypes.string.isRequired,\n        }),\n      }),\n    ),\n  ),\n  getClientsConnect: PropTypes.func.isRequired,\n  getClientByIdConnect: PropTypes.func.isRequired,\n  filter: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  clients: state.clients.data,\n  search: state.clients.search,\n  filter: state.clients.filter,\n});\n\nconst mapDispatchToProps = {\n  getClientsConnect: getClients,\n  getClientByIdConnect: getClientById,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ClientsList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ClientDetailItem = ({\n  avatar,\n  firstName,\n  lastName,\n  title,\n  company,\n  email,\n  phone,\n  street,\n  city,\n  zipcode,\n  country,\n}) => (\n  <div className=\"item\">\n    <div className=\"ui image\">\n      <img src={avatar} alt={`${firstName} ${lastName}`} />\n    </div>\n    <div className=\"content\">\n      <h2 className=\"header\">\n        {firstName}\n        {lastName}\n      </h2>\n      <p className=\"meta\">{title}</p>\n      <p className=\"meta\">{company}</p>\n      <p className=\"description\">\n        Email:\n        {email}\n      </p>\n      <p className=\"description\">\n        Phone:\n        {phone}\n      </p>\n      <p className=\"description\">\n        Address:\n        {street}\n        {city}\n        {zipcode}\n        {country}\n      </p>\n    </div>\n  </div>\n);\n\nClientDetailItem.propTypes = {\n  avatar: PropTypes.string.isRequired,\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  company: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n  street: PropTypes.string.isRequired,\n  city: PropTypes.string.isRequired,\n  zipcode: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n};\n\nexport default ClientDetailItem;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport ClientDetailItem from '../layout/ClientDetailItem';\n\nclass ClientDetail extends Component {\n  renderClientDetail = client => (client ? (\n    <div className=\"ui items segment\">\n      <ClientDetailItem\n        avatar={client.general.avatar}\n        firstName={client.general.firstName}\n        lastName={client.general.lastName}\n        title={client.job.title}\n        company={client.job.company}\n        email={client.contact.email}\n        phone={client.contact.phone}\n        street={client.address.street}\n        city={client.address.city}\n        zipcode={client.address.zipCode}\n        country={client.address.country}\n      />\n    </div>\n  ) : null);\n\n  render() {\n    const { client } = this.props;\n    return <div>{this.renderClientDetail(client)}</div>;\n  }\n}\n\nClientDetail.defaultProps = {\n  client: null,\n};\n\nClientDetail.propTypes = {\n  client: PropTypes.objectOf(\n    PropTypes.shape({\n      general: PropTypes.shape({\n        firstName: PropTypes.string.isRequired,\n        lastName: PropTypes.string.isRequired,\n        avatar: PropTypes.string.isRequired,\n      }),\n      job: PropTypes.shape({\n        company: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n      }),\n      contact: PropTypes.shape({\n        email: PropTypes.string.isRequired,\n        phone: PropTypes.string.isRequired,\n      }),\n      address: PropTypes.shape({\n        street: PropTypes.string.isRequired,\n        city: PropTypes.string.isRequired,\n        zipcode: PropTypes.string.isRequired,\n        country: PropTypes.string.isRequired,\n      }),\n    }),\n  ),\n};\n\nconst mapStateToProps = state => ({\n  client: state.clients.client,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ClientDetail);\n","import React from 'react';\nimport ClientSearch from '../container/ClientSearch';\nimport ClientsList from '../container/ClientsList';\nimport ClientDetail from '../container/ClientDetail';\n\nconst Home = () => (\n  <div className=\"ui column grid container\">\n    <div className=\"eight wide column\">\n      <ClientSearch />\n      <ClientsList />\n    </div>\n    <div className=\" eight wide column\">\n      <ClientDetail />\n    </div>\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport './App.css';\nimport store from './store/store';\nimport Home from './layout/Home';\n\nconst App = () => (\n  <Provider store={store}>\n    <Home />\n  </Provider>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
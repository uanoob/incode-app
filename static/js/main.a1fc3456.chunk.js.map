{"version":3,"sources":["store/reducers/clientReducer.js","store/reducers/index.js","store/actions/types.js","store/store.js","store/actions/clientsActions.js","container/ClientSearch.js","layout/ClientItem.js","container/ClientsList.js","layout/ClientDetailItem.js","container/ClientDetail.js","layout/Home.js","App.js","serviceWorker.js","index.js"],"names":["initialState","data","client","search","filter","combineReducers","clients","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","enhancer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","localApi","axios","create","baseURL","timeout","filterClients","object","regexp","reg","RegExp","concat","key","match","ClientSearch","searchInputHandler","e","_this$props","_this","props","searchClients","isFiltered","target","value","react_default","a","createElement","className","onChange","this","placeholder","Component","mapDispatchToProps","obj","bool","connect","ClientItem","_ref","id","avatar","firstName","lastName","title","onClick","src","alt","href","ClientsList","onClientItemHandler","getClientById","getClients","show","_this2","map","layout_ClientItem","contact","phone","general","job","asyncToGenerator","regenerator_default","mark","_callee","dispatch","response","wrap","_context","prev","next","get","sent","stop","_x","find","ClientDetailItem","company","email","street","city","zipcode","country","ClientDetail","renderClientDetail","layout_ClientDetailItem","address","zipCode","Home","container_ClientSearch","container_ClientsList","container_ClientDetail","App","es","layout_Home","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1fc3456.chunk.js","sourcesContent":["import {\r\n  GET_CLIENTS,\r\n  GET_CLIENT_BY_ID,\r\n  SEARCH_CLIENTS,\r\n  IS_FILTERED,\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  data: [],\r\n  client: null,\r\n  search: [],\r\n  filter: false,\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_CLIENTS:\r\n      return { ...state, data: action.payload };\r\n    case GET_CLIENT_BY_ID:\r\n      return { ...state, client: action.payload };\r\n    case SEARCH_CLIENTS:\r\n      return { ...state, search: action.payload };\r\n    case IS_FILTERED:\r\n      return { ...state, filter: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport clientReducer from './clientReducer';\r\n\r\nexport default combineReducers({\r\n  clients: clientReducer,\r\n});\r\n","export const GET_CLIENTS = 'GET_CLIENTS';\r\nexport const GET_CLIENT_BY_ID = 'GET_CLIENT_BY_ID';\r\nexport const SEARCH_CLIENTS = 'SEARCH_CLIENTS';\r\nexport const IS_FILTERED = 'IS_FILTERED';\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst enhancer = compose(\r\n  applyMiddleware(...middleware),\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n);\r\nconst store = createStore(rootReducer, initialState, enhancer);\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  GET_CLIENTS,\r\n  GET_CLIENT_BY_ID,\r\n  SEARCH_CLIENTS,\r\n  IS_FILTERED,\r\n} from './types';\r\n\r\nconst localApi = axios.create({\r\n  baseURL: 'http://localhost:5000',\r\n  timeout: 1000,\r\n});\r\n\r\nexport const getClients = () => async dispatch => {\r\n  const response = await localApi.get('/data');\r\n  dispatch({\r\n    type: GET_CLIENTS,\r\n    payload: response.data,\r\n  });\r\n};\r\n\r\nexport const getClientById = (clients, id) => {\r\n  const result = clients.find(client => client.contact.phone === id);\r\n  return {\r\n    type: GET_CLIENT_BY_ID,\r\n    payload: result,\r\n  };\r\n};\r\n\r\nexport const searchClients = (clients, regexp) => {\r\n  const result = clients.filter(obj => {\r\n    for (let key in obj) {\r\n      if (filterClients(obj[key], regexp)) {\r\n        return true;\r\n      }\r\n    }\r\n  });\r\n  // console.log(result);\r\n  return {\r\n    type: SEARCH_CLIENTS,\r\n    payload: result,\r\n  };\r\n};\r\n\r\nconst filterClients = (object, regexp) => {\r\n  const reg = new RegExp(`(?:^|\\\\s)${regexp}`, 'gi');\r\n  for (let key in object) {\r\n    if (object[key].match(reg)) {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\nexport const isFiltered = bool => {\r\n  return {\r\n    type: IS_FILTERED,\r\n    payload: bool,\r\n  };\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { searchClients, isFiltered } from '../store/actions';\r\n\r\nclass ClientSearch extends Component {\r\n  searchInputHandler = e => {\r\n    const { data, searchClients, isFiltered } = this.props;\r\n    searchClients(data, e.target.value);\r\n    isFiltered(true);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ui fluid icon input\">\r\n        <input\r\n          onChange={this.searchInputHandler}\r\n          type=\"text\"\r\n          placeholder=\"Search users...\"\r\n        />\r\n        <i className=\"search icon\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nClientSearch.propTypes = {\r\n  searchClients: PropTypes.func.isRequired,\r\n  isFiltered: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  data: state.clients.data,\r\n});\r\n\r\nconst mapDispatchToProps = { searchClients, isFiltered };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(ClientSearch);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ClientItem = ({ id, avatar, firstName, lastName, title, onClick }) => {\r\n  return (\r\n    <div className=\"item\">\r\n      <div className=\"ui mini image\">\r\n        <img src={avatar} alt={`${firstName} ${lastName}`} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <a href=\"#\">\r\n          <h2 className=\"header\" id={id} onClick={onClick}>\r\n            {firstName} {lastName}\r\n          </h2>\r\n        </a>\r\n        <p className=\"description\">{title}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nClientItem.propTypes = {\r\n  avatar: PropTypes.string.isRequired,\r\n  firstName: PropTypes.string.isRequired,\r\n  lastName: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ClientItem;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getClients, getClientById } from '../store/actions';\r\nimport ClientItem from '../layout/ClientItem';\r\n\r\nclass ClientsList extends Component {\r\n  componentDidMount() {\r\n    this.props.getClients();\r\n  }\r\n\r\n  onClientItemHandler = e => {\r\n    this.props.getClientById(this.props.clients, e.target.id);\r\n  };\r\n\r\n  render() {\r\n    const { clients, search, filter } = this.props;\r\n    let show;\r\n    filter ? (show = search) : (show = clients);\r\n\r\n    return (\r\n      <div className=\"ui items segment\">\r\n        {show.map(client => (\r\n          <ClientItem\r\n            key={client.contact.phone}\r\n            id={client.contact.phone}\r\n            avatar={client.general.avatar}\r\n            firstName={client.general.firstName}\r\n            lastName={client.general.lastName}\r\n            title={client.job.title}\r\n            onClick={this.onClientItemHandler}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nClientsList.propTypes = {\r\n  getClients: PropTypes.func.isRequired,\r\n  getClientById: PropTypes.func.isRequired,\r\n  clients: PropTypes.array.isRequired,\r\n  search: PropTypes.array.isRequired,\r\n  filter: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  clients: state.clients.data,\r\n  search: state.clients.search,\r\n  filter: state.clients.filter,\r\n});\r\n\r\nconst mapDispatchToProps = { getClients, getClientById };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(ClientsList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ClientDetailItem = ({\r\n  avatar,\r\n  firstName,\r\n  lastName,\r\n  title,\r\n  company,\r\n  email,\r\n  phone,\r\n  street,\r\n  city,\r\n  zipcode,\r\n  country,\r\n}) => {\r\n  return (\r\n    <div className=\"item\">\r\n      <div className=\"ui image\">\r\n        <img src={avatar} alt={`${firstName} ${lastName}`} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <h2 className=\"header\">\r\n          {firstName} {lastName}\r\n        </h2>\r\n        <p className=\"meta\">{title}</p>\r\n        <p className=\"meta\">{company}</p>\r\n        <p className=\"description\">Email: {email}</p>\r\n        <p className=\"description\">Phone: {phone}</p>\r\n        <p className=\"description\">\r\n          Address: {street} {city} {zipcode} {country}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nClientDetailItem.propTypes = {\r\n  avatar: PropTypes.string.isRequired,\r\n  firstName: PropTypes.string.isRequired,\r\n  lastName: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ClientDetailItem;\r\n","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ClientDetailItem from '../layout/ClientDetailItem';\r\n\r\nclass ClientDetail extends Component {\r\n  renderClientDetail = client =>\r\n    client ? (\r\n      <div className=\"ui items segment\">\r\n        <ClientDetailItem\r\n          avatar={client.general.avatar}\r\n          firstName={client.general.firstName}\r\n          lastName={client.general.lastName}\r\n          title={client.job.title}\r\n          company={client.job.company}\r\n          email={client.contact.email}\r\n          phone={client.contact.phone}\r\n          street={client.address.street}\r\n          city={client.address.city}\r\n          zipcode={client.address.zipCode}\r\n          country={client.address.country}\r\n        />\r\n      </div>\r\n    ) : null;\r\n\r\n  render() {\r\n    const { client } = this.props;\r\n    return <div>{this.renderClientDetail(client)}</div>;\r\n  }\r\n}\r\n\r\nClientDetail.propTypes = {};\r\n\r\nconst mapStateToProps = state => ({\r\n  client: state.clients.client,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(ClientDetail);\r\n","import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport ClientSearch from '../container/ClientSearch';\r\nimport ClientsList from '../container/ClientsList';\r\nimport ClientDetail from '../container/ClientDetail';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"ui column grid container\">\r\n      <div className=\"eight wide column\">\r\n        <ClientSearch />\r\n        <ClientsList />\r\n      </div>\r\n      <div className=\" eight wide column\">\r\n        <ClientDetail />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nHome.propTypes = {};\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\n\nimport './App.css';\nimport store from './store/store';\nimport Home from './layout/Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Home />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}